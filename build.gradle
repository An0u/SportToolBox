buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "io.franzbecker:gradle-lombok:3.2.0"
	}
}

plugins {
	id 'org.springframework.boot' version '2.1.9.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
	id 'io.franzbecker.gradle-lombok' version '3.2.0'
}

group = 'segelzwerg'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven {
		url "https://plugins.gradle.org/m2/"
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

apply plugin: 'java'
apply plugin: "io.franzbecker.gradle-lombok"

import io.franzbecker.gradle.lombok.task.DelombokTask

// Lombok Task
lombok {
	version = "1.16.10"
}

task delombok(type: DelombokTask) {
	ext.outputDir = file("$buildDir/delombok")
	outputs.dir(outputDir)
	sourceSets.main.java.srcDirs.each {
		inputs.dir(it)
		args(it, "-d", outputDir)
	}
}

task generateJavadocs(type: Javadoc) {
	dependsOn delombok
	source = sourceSets.main.allJava
	destinationDir = reporting.file("javadocs")
	failOnError = false;
}
